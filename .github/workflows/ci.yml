name: CI/CD Pipeline
permissions:
  contents: write
  packages: write
on:
  push:
    branches: [ "dev", "staging" ]
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 Git 历史
          
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set version and environment
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            VERSION=dev-$(git rev-parse --short HEAD)
            ENVIRONMENT=dev
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            VERSION=staging-$(git rev-parse --short HEAD)
            ENVIRONMENT=staging
          else
            VERSION=sit-latest
            ENVIRONMENT=sit
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "Building with version: $VERSION for environment: $ENVIRONMENT"
          
      - name: Build and push microservice1 Docker image
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          echo "Building microservice1 image with version: $VERSION"
          
          cd microservice1
          docker build -t ghcr.io/${{ github.repository }}/microservice1:$VERSION .
          docker push ghcr.io/${{ github.repository }}/microservice1:$VERSION
          
      - name: Build and push microservice2 Docker image
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          echo "Building microservice2 image with version: $VERSION"
          
          cd microservice2
          docker build -t ghcr.io/${{ github.repository }}/microservice2:$VERSION .
          docker push ghcr.io/${{ github.repository }}/microservice2:$VERSION
          
      - name: Update Helm values and commit
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          ENVIRONMENT=${{ steps.version.outputs.ENVIRONMENT }}
          
          echo "Updating $ENVIRONMENT environment with version $VERSION"
          
          # 配置 Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 拉取最新的远程更改以避免冲突
          git fetch origin
          git rebase origin/${{ github.ref_name }}
          
          # 只检查和更新当前环境的配置文件
          if [ ! -f environments/$ENVIRONMENT/microservice1-values.yaml ]; then
            echo "Error: environments/$ENVIRONMENT/microservice1-values.yaml not found"
            exit 1
          fi
          if [ ! -f environments/$ENVIRONMENT/microservice2-values.yaml ]; then
            echo "Error: environments/$ENVIRONMENT/microservice2-values.yaml not found"
            exit 1
          fi
          
          # 只更新当前环境的 Helm 值文件中的 tag
          sed -i "s|tag: .*|tag: \"$VERSION\"|" environments/$ENVIRONMENT/microservice1-values.yaml
          sed -i "s|tag: .*|tag: \"$VERSION\"|" environments/$ENVIRONMENT/microservice2-values.yaml
          
          # 显示更改内容用于调试
          echo "Changes made to microservice1-values.yaml:"
          cat environments/$ENVIRONMENT/microservice1-values.yaml | grep -A1 -B1 "tag:"
          echo "Changes made to microservice2-values.yaml:"
          cat environments/$ENVIRONMENT/microservice2-values.yaml | grep -A1 -B1 "tag:"
          
          # 检查是否有更改
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # 显示 git diff 用于调试
          echo "Git diff:"
          git diff
          
          # 提交更新
          git add environments/$ENVIRONMENT/microservice1-values.yaml
          git add environments/$ENVIRONMENT/microservice2-values.yaml
          
          # 尝试提交，如果有冲突则重试
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git commit -m "chore: Update $ENVIRONMENT microservice image tags to $VERSION [skip ci]"; then
              if git push origin ${{ github.ref_name }}; then
                echo "Successfully pushed changes"
                break
              else
                echo "Push failed, attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
                git fetch origin
                git rebase origin/${{ github.ref_name }}
              fi
            else
              echo "Nothing to commit"
              break
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to push after $MAX_RETRIES attempts"
              exit 1
            fi
            
            sleep 2
          done
